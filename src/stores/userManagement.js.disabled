import { defineStore } from "pinia";
import { api, axios } from "boot/axios";
import { LocalStorage as SessionStorage } from "quasar";
const endPoint = "/user";

export const userManagementStore = defineStore("userManagement", {
  state: () => ({
    items: {
      columns: [
        {
          name: "name",
          align: "left",
          label: "Name",
          field: "name",
          sortable: true,
        },
        {
          name: "username",
          align: "left",
          label: "Username",
          field: "username",
          sortable: true,
        },
        {
          name: "email",
          align: "left",
          label: "Email",
          field: "email",
          sortable: true,
        },
        {
          name: "role",
          align: "left",
          label: "Role",
          field: "role",
          sortable: true,
        },
        {
          name: "actions",
          align: "right",
          label: "actions",
        },
      ],
      visibleColumns: [
        "name",
        "username",
        "email",
        "password",
        "role_id",
        "actions",
      ],
      data: [],
      pagination: {
        sortBy: "",
        descending: false,
        page: 1,
        direction: null,
        rowsPerPage: 10,
        totalRecords: 0,
      },
      filter: {
        search: "",
        role: null,
        trashed: false,
      },
      lastUpdated: "",
    },
    modals: {
      create: false,
      edit: false,
    },
  }),
  getters: {
    authUser: (state) => state.authUserDetails,
  },
  actions: {
    getItems(props) {
      if (props.all == true) {
        var params = {
          all: props.all,
        };
      } else {
        if (props.pagination.descending == true) {
          var direction = "DESC";
        } else {
          var direction = "ASC";
        }

        var params = {
          sort: props.pagination.sortBy,
          direction: direction,
          page: props.pagination.page,
          rowsPerPage: props.pagination.rowsPerPage,
          search: state.items.filter.search,
          role: state.items.filter.role,
        };
      }

      return new Promise((resolve, reject) => {
        api
          .get(endPoint, {
            params: params,
          })
          .then((response) => {
            resolve(response);
          })
          .catch((err) => {
            reject(err);
          });
      });
    },
  },
});
